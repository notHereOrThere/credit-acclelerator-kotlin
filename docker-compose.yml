version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  db:
    image: postgres:15
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d deal"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: deal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data

  conveyor-service:
    image: conveyor-service
    container_name: conveyor-service
    ports:
      - "8080:8080"
    build:
      context: conveyor
      dockerfile: Dockerfile

  deal-service:
    image: deal-service
    container_name: deal-service
    build:
      context: deal
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - db
      - kafka

  dossier-service:
    image: dossier-service
    container_name: dossier-service
    build:
      context: dossier
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "8083:8083"

  application-service:
    image: application-service
    container_name: application-service
    build:
      context: application
      dockerfile: Dockerfile
    ports:
      - "8082:8082"

  gateway-service:
    image: gateway-service
    container_name: gateway-service
    build:
      context: gateway
      dockerfile: Dockerfile
    ports:
      - "8084:8084"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./deal/src/main/resources/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
#подрубаться к прометиус через графана по доменному имени
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "8079:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: "ADMIN"
      GF_SECURITY_ADMIN_PASSWORD: ADMIN
    volumes:
      - grafana_data:/var/lib/grafana


  redis:
    image: redis/redis-stack
    container_name: redis
    ports:
      - 6379:6379

  redis-insight:
    image: redislabs/redisinsight
    container_name: redis-insight
    ports:
      - 8001:8001

volumes:
  db-data:
  grafana_data:

networks:
  default:
    driver: bridge
